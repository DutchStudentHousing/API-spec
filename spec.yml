openapi: 3.0.3
info:
  title: Dutch Student Housing 
  description: |-
     Dutch Student Housing version 1
  contact:
    email: rogier@codegorilla.nl
  version: 0.1.0
externalDocs:
  description: git
  url: https://github.com/orgs/DutchStudentHousing
# servers:
#   - url: https://petstore3.swagger.io/api/v3
tags:
  - name: property
    description: Property listings and management
  - name: message
    description: Receive and send messages
  - name: user
    description: Operations about user
paths:
  /properties:
    get:
      tags:
        - property
      summary: Get properties with optional filters
      description: Get properties with optional filters
      operationId: getProperties
      parameters:
        - name: city
          in: query
          description: City where the property is
          required: false
          explode: false
          schema:
            type: string
          example: "Groningen"
        - name: lat
          in: query
          description: Latitude
          required: false
          explode: false
          schema:
            type: number
            format: float
        - name: long
          in: query
          description: Longitude
          required: false
          explode: false
          schema:
            type: number
            format: float
        - name: distance
          in: query
          description: Distance in kilometers from known point
          required: false
          explode: false
          schema:
            type: number
            format: float
        - name: perPage
          in: query
          description: Items per page
          required: false
          explode: false
          allowEmptyValue: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Page number (allows computed range on server side along with perPage parameter)
          required: false
          explode: false
          allowEmptyValue: true
          schema:
            type: integer
            format: int32
        - name: orderBy
          in: query
          description: Value to order listed items by
          required: false
          explode: false
          schema:
            type: string
            default: price
            enum:
            - price
            - pricepersqm
        - name: min
          in: query
          description: Minimum price
          required: false
          explode: false
          schema:
            type: number
            format: float
        - name: max
          in: query
          description: Maximum price
          required: false
          explode: false
          schema:
            type: number
            format: float
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Properties'
            text/csv:
              schema:
                type: string
        '400':
          description: Invalid paramters
        '404':
          description: No properties found for given parameters 
        '401':
          description: Unauthorized to view properties (not yet logged in?)
      security:
        - dsh_auth:
            - read:properties
  /property:
    put:
      tags:
        - property
      summary: Update an existing property
      description: Update an existing property by Id
      operationId: updateProperty
      requestBody:
        description: Update an existent property listing
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
            text/csv:
              schema:
                type: string
        '400':
          description: Invalid ID supplied
        '404':
          description: Property not found
        '405':
          description: Validation exception
      security:
        - dsh_auth:
            - write:properties
            - read:properties
    post:
      tags:
        - property
      summary: Add a new property listing
      description: Add a new property listing
      operationId: addProperty
      requestBody:
        description: Create a new property listing
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
            text/csv:
              schema:
                type: string
        '405':
          description: Invalid input
      security:
        - dsh_auth:
            - write:properties
            - read:properties
components:
  schemas:
    Property:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        city:
          type: string
        lat:
          type: number
          format: float
        long:
          type: number
          format: float
        img:
          type: string
        date_published:
          type: string
          format: date-time
        rent:
          type: number
          format: float
        rent_incl:
          type: boolean
        sqm:
          type: integer
          format: int32
        postal_code:
          type: string
        type:
          type: string
          default: Room
          enum:
            - Room
            - Apartment
            - Studio
            - Other
    Properties:
      type: array
      items:
        $ref: '#/components/schemas/Property'
  securitySchemes:
    dsh_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      # flows:
      #   implicit:
      #     authorizationUrl: https://petstore3.swagger.io/oauth/authorize
      #     scopes:
      #       write:properties: modify properties in your account
      #       read:properties: read available properties
    api_key:
      type: apiKey
      name: api_key
      in: header